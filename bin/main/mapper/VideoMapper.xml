<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	
	<mapper namespace="mapper.VideoMapper">
		
		<insert id="insert" statementType="CALLABLE" parameterType="map">
			CALL insert_video(
				#{video.channelId},
				#{video.url},
				#{video.visible},
				#{video.thumbnail},
				#{video.title},
				#{video.info},
				#{video.location},
				#{video.age},
				#{video.date},
				#{video.categoryId}	
			)
		</insert>
		
		<select id="selectChannelVideo" resultType="videoDto">
		
			SELECT video_id, contents_id, channel_id, url, public, thumbnail, title, info, location, age, views,
			 `like`, hate, reply_count, `date`, category_id, `profile`
			 
			FROM CHANNEL NATURAL JOIN

			(SELECT * FROM video WHERE channel_id = #{channelId} ORDER BY `date` DESC LIMIT 100) AS video_list
			
		</select>
		
		<select id="selectSubscribeVideo" resultType="videoDto">
		
			SELECT video_id, contents_id, channel_id, url, public, thumbnail, title, info, location, age, views,
			 `like`, hate, reply_count, `date`, category_id, `profile`
			 
			FROM CHANNEL NATURAL JOIN
			
			(SELECT * FROM video WHERE channel_id IN (SELECT channel_id FROM subscribers WHERE user_id = #{userId})
			
			 ORDER BY `date` DESC LIMIT 100) AS video_list ORDER BY `date` DESC;
			 
		</select>
		
		<select id="selectMainVideo" resultType="videoDto">
		
			SELECT video_id, contents_id, channel_id, url, public, thumbnail, title, info, location, age, views,
			 `like`, hate, reply_count, `date`, category_id, `profile` 
			 
			 FROM CHANNEL NATURAL JOIN
			
			((SELECT * FROM video WHERE category_id IN
			(SELECT category_id FROM (SELECT category_id, COUNT(*) AS COUNT FROM video 
			JOIN 
			(SELECT * FROM HISTORY WHERE user_id = #{userId}) AS user_history
			WHERE user_history.video_id = video.video_id 
			GROUP BY category_id 
			ORDER BY COUNT DESC 
			LIMIT 3) AS category_list) 
			
			ORDER BY `date` 
			LIMIT 80)
			
			UNION
			
			(SELECT * FROM video ORDER BY views LIMIT 20) ORDER BY RAND()) AS video_list
			
		</select>
		
		<select id="selectHistoryVideo" resultType="videoDto">
		
			SELECT video_id, contents_id, channel_id, url, public, thumbnail, title, info, location, age, views,
			 `like`, hate, reply_count, `date`, category_id, `profile`, history_date FROM CHANNEL

			NATURAL JOIN
			
			(SELECT * FROM video 
			
			NATURAL JOIN
			
			(SELECT user_id, video_id, `date` AS history_date FROM HISTORY 
			WHERE user_id = #{userId}) AS history_list) AS video_list
			
			ORDER BY history_date DESC
			
		</select>
		
		<update id="update" parameterType="map">
			UPDATE video 
			
			<set>
				<if test='!oldVideo.title.equals(newVideo.title)'>title = #{newVideo.title}, </if>
				<if test='!oldVideo.info.equals(newVideo.info)'>info = #{newVideo.info}, </if>
				<if test='oldVideo.visible != newVideo.visible'>public = #{newVideo.visible}, </if>
				<if test='oldVideo.age != newVideo.age'>age = #{newVideo.age}, </if>
				<if test='!oldVideo.location.equals(newVideo.location)'>location = #{newVideo.location}, </if>
				<if test='!oldVideo.thumbnail.equals(newVideo.thumbnail)'>thumbnail = #{newVideo.thumbnail}, </if>
			</set>
			
			WHERE video_id = #{oldVideo.videoId}
		</update>
		
		<update id="updateLike">
		
			UPDATE video SET 'like' = 'like' + #{value} WHERE video_id = #{videoId}
		
		</update>
		
		<update id="updateHate">
		
			UPDATE video SET hate = hate + #{value} WHERE video_id = #{videoId}
		
		</update>
		
		<update id="updateReplyCount">
		
			UPDATE video SET reply_count = reply_count + #{value} WHERE video_id = #{videoId}
		
		</update>
		
		<update id="updateViews">
		
			UPDATE video SET views = views + #{value} WHERE video_id = #{videoId}
		
		</update>
		
	</mapper>
