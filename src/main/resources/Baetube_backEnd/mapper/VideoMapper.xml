<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	
	<mapper namespace="Baetube_backEnd.mapper.VideoMapper">
		
		<insert id="insert" statementType="CALLABLE" parameterType="map">
			CALL insert_video(
				#{video.channelId},
				#{video.url},
				#{video.visible},
				#{video.thumbnail},
				#{video.title},
				#{video.info},
				#{video.location},
				#{video.age},
				#{video.categoryId},
				#{video.videoId, mode=OUT, jdbcType=INTEGER, javaType=int}
			)
		</insert>
		
		<select id="selectChannelVideo" resultType="videoDto">
		
			SELECT video_id as videoId, contents_id as contentsId, channel_id as channelId, url, public, thumbnail, title,
			info, location, age, views, `like`, hate, reply_count as replyCount, `date`, category_id as categoryId,`profile`, `name`
			FROM video NATURAL JOIN contents NATURAL JOIN CHANNEL WHERE channel_id = #{channelId}
			ORDER BY `date` DESC LIMIT 100;
			
		</select>
		
		<select id="selectSubscribeVideo" resultType="videoDto">
		
			SELECT video_id as videoId, contents_id as contentsId, channel_id as channelId, url, public, thumbnail, title,
			info, location, age, views, `like`, hate, reply_count as replyCount, `date`, category_id as categoryId, `profile`, `name`
		 	FROM video NATURAL JOIN contents NATURAL JOIN CHANNEL WHERE channel_id IN 
			(SELECT channel_id FROM subscribers WHERE subscriber_id = #{channelId})
			ORDER BY `date` DESC LIMIT 100;
			 
		</select>
		
		<select id="selectMainVideo" resultType="videoDto">
		
			SELECT video_id as videoId, contents_id as contentsId, channel_id as channelId, url, public, thumbnail, title,
			info, location, age, views, `like`, hate, reply_count as replyCount, `date`, category_id as categoryId,
			`profile`, `name`, subs 
			 
			 FROM CHANNEL NATURAL JOIN

			(((SELECT contents_id, video_id, channel_id, url, public, thumbnail, title, info, location, age, views,
			`date`, category_id, `type`, `like`, hate, reply_count FROM (SELECT * FROM video NATURAL JOIN contents WHERE category_id) 
			AS video_list NATURAL JOIN			
			(SELECT category_id, COUNT(*) AS COUNT FROM video JOIN HISTORY WHERE video.video_id = history.video_id 
			AND user_id = #{userId} GROUP BY category_id ORDER BY COUNT DESC LIMIT 3) AS category_list) ORDER BY `date` LIMIT 80)
			
			UNION
			
			SELECT * FROM video NATURAL JOIN contents ORDER BY views DESC LIMIT 20) AS main_video_list ORDER BY RAND();
			
		</select>
		
		<select id="selectHistoryVideo" resultType="videoDto">
		
			SELECT video.video_id as videoId, contents_id as contentsId, channel_id as channelId, url, public, thumbnail, title,
			info, location, age, views, `like`, hate, reply_count as replyCount, video.date AS `date`, category_id as categoryId,
			`profile`, `name`,  history.date AS historyDate
			FROM video NATURAL JOIN contents NATURAL JOIN CHANNEL JOIN HISTORY WHERE video.video_id = history.video_id 
			AND history.user_id = #{userId} ORDER BY historyDate DESC;
			
		</select>
		
		<select id="selectPlaylistVideo" resultType="videoDto">
		
			SELECT video_id as videoId, contents_id as contentsId, channel_id as channelId, url, public, thumbnail, title,
			info, location, age, views, `like`, hate, reply_count as replyCount, `date`,category_id as categoryId, `profile`, `name`,
			playlist_id as playlistId
 			FROM video NATURAL JOIN contents NATURAL JOIN CHANNEL NATURAL JOIN playlist_item WHERE playlist_id = #{playlistId};
		
		</select>
		
		<select id="selectByVideoId" resultType="videoDto">
		
			SELECT video_id as videoId, contents_id as contentsId, channel_id as channelId, url, public, thumbnail, title, info, 
			location, age, views, `like`, hate, reply_count as replyCount, `date`, category_id as categoryId, `profile`, `name`, subs
			FROM video NATURAL JOIN contents NATURAL JOIN CHANNEL WHERE video_id = #{videoId};
		
		</select>
		
		<select id="selectRelatedVideo" resultType="videoDto">
		
			(SELECT video_id as videoId, contents_id as contentsId, channel_id as channelId, url, public, thumbnail, title, info, 
			location, age, views, `like`, hate, reply_count as replyCount, `date`, category_id as categoryId, `profile`, `name`, subs 
			FROM video NATURAL JOIN `channel` NATURAL JOIN contents 
			WHERE category_id = (SELECT category_id FROM video WHERE video_id = #{videoId}) ORDER BY views DESC LIMIT 25)

			UNION

			(SELECT video_id as videoId, contents_id as contentsId, channel_id as channelId, url, public, thumbnail, title, info, 
			location, age, views, `like`, hate, reply_count as replyCount, `date`, category_id as categoryId, `profile`, `name`, subs 
			FROM video NATURAL JOIN `channel` NATURAL JOIN contents 
			WHERE channel_id = (SELECT channel_id FROM video WHERE video_id = #{videoId}) LIMIT 25);
		
		</select>
		
		<update id="update" parameterType="map">
			UPDATE video 
			
			<set>
				<if test='!oldVideo.title.equals(newVideo.title)'>title = #{newVideo.title}, </if>
				<if test='!oldVideo.info.equals(newVideo.info)'>info = #{newVideo.info}, </if>
				<if test='oldVideo.visible != newVideo.visible'>public = #{newVideo.visible}, </if>
				<if test='oldVideo.age != newVideo.age'>age = #{newVideo.age}, </if>
				<if test='!oldVideo.location.equals(newVideo.location)'>location = #{newVideo.location}, </if>
				<if test='!oldVideo.thumbnail.equals(newVideo.thumbnail)'>thumbnail = #{newVideo.thumbnail}, </if>
			</set>
			
			WHERE video_id = #{oldVideo.videoId}
		</update>
		
		<update id="updateViews">
		
			UPDATE video SET views = views + #{value} WHERE video_id = #{videoId}
		
		</update>
		
	</mapper>
